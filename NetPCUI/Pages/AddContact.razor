@page "/add-contact"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using NetPCUI.Models
@inject ContactService ContactService

<h3>Dodaj kontakt</h3>

<EditForm Model="@newContact" OnValidSubmit="HandleSubmit">
    <div style="display: flex; flex-direction: column; max-width: 300px; gap: 0.5rem;">
        <label>Imię:</label>
        <InputText @bind-Value="newContact.FirstName" />

        <label>Nazwisko:</label>
        <InputText @bind-Value="newContact.LastName" />

        <label>Email:</label>
        <InputText @bind-Value="newContact.Email" />

        <label>Hasło:</label>
        <InputText @bind-Value="newContact.Password" type="password" />

        <label>Telefon:</label>
        <InputText @bind-Value="newContact.PhoneNumber" />

        <label>Data urodzenia:</label>
        <InputDate @bind-Value="newContact.BirthDate" />

        <label>ID kategorii:</label>
        <InputNumber @bind-Value="newContact.CategoryId" />

        <button type="submit">Dodaj</button>
    </div>
</EditForm>


@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private ContactCreateDto newContact = new();
    private string message = "";

    private async Task HandleSubmit()
    {
        try
        {
            // Pobierz token
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

            if (string.IsNullOrEmpty(token))
            {
                message = "Brak tokenu. Zaloguj się.";
                return;
            }

            var success = await ContactService.AddContactAsync(newContact, token);

            if (success)
            {
                message = "Dodano kontakt!";
                Navigation.NavigateTo("/");
            }
            else
            {
                message = "Nie udało się dodać kontaktu.";
            }
        }
        catch (Exception ex)
        {
            message = $"Błąd: {ex.Message}";
        }
    }
}
