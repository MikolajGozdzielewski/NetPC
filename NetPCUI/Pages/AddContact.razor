@page "/add-contact"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using NetPCUI.Models
@inject ContactService ContactService
@inject CategoryService CategoryService

<h3>Dodaj kontakt</h3>

@* Fromularz do dodawania kontaktu *@
<EditForm Model="@newContact" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator /> @* Dodaje walidacje na podstawie klasy *@
    <ValidationSummary /> @* Dodaje błędy walidacji *@

    <div style="display: flex; flex-direction: column; max-width: 300px; gap: 0.5rem;">
        <label>Imię:</label>
        <InputText @bind-Value="newContact.FirstName" />

        <label>Nazwisko:</label>
        <InputText @bind-Value="newContact.LastName" />

        <label>Email:</label>
        <InputText @bind-Value="newContact.Email" />

        <label>Hasło:</label>
        <InputText @bind-Value="newContact.Password" type="password" />

        <label>Telefon:</label>
        <InputText @bind-Value="newContact.PhoneNumber" />

        <label>Data urodzenia:</label>
        <InputDate @bind-Value="newContact.BirthDate" />

        @* Wyświetlenie kategorii z bazy z tabeli Categories *@
        <label>Kategoria</label>
        <select value="newContact.CategoryId" @onchange="OnCategoryChanged">
            <option value="">-- Wybierz kategorię --</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>

        @* Dla wybranej ketegorii "służbowy", ma pojawić się llista rozwijana z podkategoriami, a dla "inny" pojawia się pole tekstowe *@
        @if (!string.IsNullOrEmpty(selectedCategoryName) && selectedCategoryName == "służbowy")
        {
            <label>Subkategoria:</label>
            <InputSelect @bind-Value="newContact.SubcategoryId">
                <option value="">-- Wybierz subkategorię --</option>
                @foreach (var sub in subcategories)
                {
                    <option value="@sub.Id">@sub.Name</option>
                }
            </InputSelect>
        }
        else if (!string.IsNullOrEmpty(selectedCategoryName) && selectedCategoryName == "inny")
        {
            <label>Inna subkategoria:</label>
            <InputText @bind-Value="newContact.AnotherSubcategory" />
        }

        <button type="submit">Dodaj</button>
    </div>
</EditForm>

@* Wyświetlanie ewentualnych błędów, wcześniej nie wykrytych, jak nieunikalny adres email. *@
@if (!string.IsNullOrEmpty(message))
{
    <p class="text-danger">@message</p>
}

@code {
    private ContactCreateDto newContact = new();
    private List<CategoryDto> categories = new();
    private List<SubcategoryDto> subcategories = new();
    private string selectedCategoryName = "";
    private string message = "";
    private int selectedCategoryId;

    /*
    * <summary>
    * Inicjalizacja kategorii
    * </summary>
    */
    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }

    /*
    * <summary>
    * Funkcja wywoływana przy próbie dodania kontaktu
    * </summary>
    */
    private async Task HandleSubmit()
    {
        try
        {
            // Pobranie tokenu, sprawdzenie czy użytkownik jest zalogowany
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

            if (string.IsNullOrEmpty(token))
            {
                message = "Brak tokenu. Zaloguj się.";
                return;
            }

            var (success, errorMsg, validationErrors) = await ContactService.AddContactAsync(newContact, token);


            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                if (validationErrors != null && validationErrors.Any())
                {
                    foreach (var error in validationErrors)
                    {
                        message += $"{error.Key}: {string.Join(", ", error.Value)}\n";
                    }
                }
                else
                {
                    message = errorMsg ?? "Nie udało się dodać kontaktu.";
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Błąd: {ex.Message}";
        }
    }

    /*
    * <summary>
    * Funkcja wywoływana przy zmianie kategorii, pozwala dostosować się polom związanym z podkategorią
    * </summary>
    */
    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        // Zmiana kategorii na wybraną
        selectedCategoryId = int.Parse(e.Value.ToString());
        var selectedCategory = categories.FirstOrDefault(c => c.Id == selectedCategoryId);

        // Wpisanie nazwy kategorii w formularzu
        if (selectedCategory != null)
        {
            selectedCategoryName = selectedCategory.Name;
        }

        // Zmiana obiektu
        newContact.CategoryId = selectedCategoryId;

        // Jeśli kategoria to "służbowy" to ładuje podkategorie dla kategorii "służbowy"
        if (selectedCategoryName == "służbowy")
        {
            subcategories = await CategoryService.GetSubcategoriesByCategoryIdAsync(selectedCategoryId);
            newContact.SubcategoryId = null;
            newContact.AnotherSubcategory = null;
        }
        else
        {
            newContact.SubcategoryId = null;
            newContact.AnotherSubcategory = null;
        }

        StateHasChanged();
    }
}
