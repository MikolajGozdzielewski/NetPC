@page "/contacts"
@using System.Net.Http.Json
@using System.Collections.Generic
@inject HttpClient Http
@using NetPCUI.Models
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ContactService ContactService
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

@* Strona wyświetlająca kontakty *@

<h3>Lista kontaktów</h3>

@* Informacje o stanie wczytywania kontaktów, informuje czy pojawił się jakiś błąd *@
@if (isLoading)
{
    <p>Ładowanie...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Błąd: @errorMessage</p>
}
else if (contacts == null || contacts.Count == 0)
{
    <p>Brak kontaktów do wyświetlenia.</p>
}
else
{
    <div class="contact-list">
        @foreach (var contact in contacts)
        {
            <div class="contact-item" @onclick="() => ToggleDetails(contact)">
                <strong>@contact.FirstName @contact.LastName</strong>

                @* Wyświetla dodatkowe informacje dla kontaktu *@
                @if (expandedContacts.Contains(contact))
                {
                    <div class="contact-details">
                        <p>Email: @contact.Email</p>
                        <p>Telefon: @contact.PhoneNumber</p>
                        <p>Data urodzenia: @contact.BirthDate</p>
                        <p>Kategoria: @contact.CategoryName</p>

                        @* Wyświetla podkatedorię w zależności czy kontakt taką posiada *@
                        @if (!string.IsNullOrEmpty(contact.SubcategoryName))
                        {
                            <p>Podkategoria: @contact.SubcategoryName</p>
                        }
                        @if (!string.IsNullOrEmpty(contact.AnotherSubcategory))
                        {
                            <p>Podkategoria: @contact.AnotherSubcategory</p>
                        }

                        @* Dla niezalogowanego użytkownika, nie pojawią się przyciski do edycji i usuwania *@
                        @if (isLoggedIn)
                        {
                            <button @onclick:stopPropagation="true" @onclick="() => EditContact(contact.Id)">Edytuj</button>
                            <button @onclick:stopPropagation="true" @onclick="() => DeleteContact(contact.Id)">Usuń</button>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

<button @onclick="RefreshContacts">Odśwież listę</button>

@code {
    private List<ContactDto> contacts = new();
    private HashSet<ContactDto> expandedContacts = new();
    private bool isLoading = true;
    private string errorMessage;
    private bool isLoggedIn;


    /*
    * <summary>
    * Inicjalizacja kontaktów oraz sprawdzenie stanu zalogowania
    * </summary>
    */
    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
        isLoggedIn = await AuthService.IsLoggedInAsync();
    }


    /*
    * <summary>
    * Funkcja pobiera kontakty z bazy danych przez API
    * </summary>
    */
    private async Task LoadContacts()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            contacts = await Http.GetFromJsonAsync<List<ContactDto>>("api/Contacts") ?? new List<ContactDto>();
        }
        catch (Exception ex)
        {
            errorMessage = "Nie udało się pobrać danych z serwera.";
        }
        finally
        {
            isLoading = false;
        }
    }

    /*
    * <summary>
    * Funkcja po naciśnięciu przycisku do edycji przenosi na stronę do edycji.
    * </summary>
    */
    private void EditContact(int contactId)
    {
        NavigationManager.NavigateTo($"/edit-contact/{contactId}");
    }

    /*
    * <summary>
    * Funkcja usuwa kontakt z bazy.
    * </summary>
    */
    private async Task DeleteContact(int id)
    {
        // Wywołanie potwierdzenia usunięcia, żeby nie było możliwości usunięcia kontaktu przez przypadek.
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Czy na pewno chcesz usunąć kontakt?" });
        if (!confirm) return;

        // Pobranie tokenu, który jest potrzebny do usunięcia kontaktu
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

        if (string.IsNullOrEmpty(token))
        {
            return;
        }

        bool success = await ContactService.DeleteContactAsync(id,token);
        if (success)
        {
            contacts.RemoveAll(c => c.Id == id); 
        }
    }

    /*
    * <summary>
    * Funkcja służąca do rozwijania i zwijania dodatkowych informacji o kontakcie.
    * </summary>
    */
    private void ToggleDetails(ContactDto contact)
    {
        if (expandedContacts.Contains(contact))
        {
            expandedContacts.Remove(contact);
        }
        else
        {
            expandedContacts.Add(contact);
        }
    }

    /*
    * <summary>
    * Funkcja odświeżająca listę kontaktów.
    * </summary>
    */
    private async Task RefreshContacts()
    {
        await LoadContacts();
    }
}

@* Style służą do lekkiej korekcji wyglądu listy kontaktów, są tutaj, a nie w pliku .razor.css, ponieważ pojawiły się problemy z wczytaniem takiego pliku *@
<style>
    .contact-item {
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .contact-item:hover {
            background-color: #e0e0e0;
        }

    .contact-details {
        margin-top: 0.5rem;
        font-size: 0.95rem;
    }
</style>