@page "/contacts"
@using System.Net.Http.Json
@using System.Collections.Generic
@inject HttpClient Http
@using NetPCUI.Models

<h3>Lista kontaktów</h3>

@if (isLoading)
{
    <p>Ładowanie...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Błąd: @errorMessage</p>
}
else if (contacts == null || contacts.Count == 0)
{
    <p>Brak kontaktów do wyświetlenia.</p>
}
else
{
    <div class="contact-list">
        @foreach (var contact in contacts)
        {
            <div class="contact-item" @onclick="() => ToggleDetails(contact)">
                <strong>@contact.FirstName @contact.LastName</strong>

                @if (expandedContacts.Contains(contact))
                {
                    <div class="contact-details">
                        <p>Email: @contact.Email</p>
                        <p>Telefon: @contact.PhoneNumber</p>
                    </div>
                }
            </div>
        }
    </div>
}

<button @onclick="RefreshContacts">Odśwież listę</button>

@code {
    private List<Contact> contacts = new();
    private HashSet<Contact> expandedContacts = new();
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            contacts = await Http.GetFromJsonAsync<List<Contact>>("api/Contacts") ?? new List<Contact>();
        }
        catch (Exception ex)
        {
            errorMessage = "Nie udało się pobrać danych z serwera.";
            Console.WriteLine($"Błąd API: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleDetails(Contact contact)
    {
        if (expandedContacts.Contains(contact))
        {
            expandedContacts.Remove(contact);
        }
        else
        {
            expandedContacts.Add(contact);
        }
    }

    private async Task RefreshContacts()
    {
        await LoadContacts();
    }
}

<style>
    .contact-item {
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .contact-item:hover {
            background-color: #e0e0e0;
        }

    .contact-details {
        margin-top: 0.5rem;
        font-size: 0.95rem;
    }
</style>