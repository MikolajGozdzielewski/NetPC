@page "/edit-contact/{id:int}"
@inject HttpClient Http
@using NetPCUI.Models
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ContactService ContactService
@inject CategoryService CategoryService

<PageTitle>Edytuj Kontakt</PageTitle>

<h3>Edytowanie kontaktu</h3>

@* Jeśli kontakt nie istnieje, nie pojawi się formularz do edycji. Formularz do edycji różni się od tego do dodawania, że nie ma hasła. *@
@if (contact == null)
{
    <p>Ładowanie...</p>
}
else{
    @* Fromularz do edycji kontaktu *@
    <EditForm Model="@contact" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator /> @* Dodaje walidacje na podstawie klasy *@
        <ValidationSummary /> @* Dodaje błędy walidacji *@

        <div style="display: flex; flex-direction: column; max-width: 300px; gap: 0.5rem;">
            <label>Imię:</label>
            <InputText @bind-Value="contact.FirstName" />

            <label>Nazwisko:</label>
            <InputText @bind-Value="contact.LastName" />

            <label>Email:</label>
            <InputText @bind-Value="contact.Email" />

            <label>Telefon:</label>
            <InputText @bind-Value="contact.PhoneNumber" />

            <label>Data urodzenia:</label>
            <InputDate @bind-Value="contact.BirthDate" />

            @* Wyświetlenie kategorii z bazy z tabeli Categories, select zamiast InputSelect, ponieważ pojawiły się problemy przy wyświetlaniu obecnej wartości kategorii. *@
            @* Różnica między tym, a odpowiednikiem przy dodawaniu jest też @bind zamiast value, powód taki sam jak powyżej. *@
            <select @bind="CategoryId" @bind:event="onchange">
                <option value="">-- Wybierz kategorię --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>

            @* Dla wybranej ketegorii "służbowy", ma pojawić się llista rozwijana z podkategoriami, a dla "inny" pojawia się pole tekstowe *@
            @if (!string.IsNullOrEmpty(selectedCategoryName) && selectedCategoryName == "służbowy")
            {
                <label>Subkategoria:</label>
                <InputSelect @bind-Value="contact.SubcategoryId">
                    <option value="">-- Wybierz subkategorię --</option>
                    @foreach (var sub in subcategories)
                    {
                        <option value="@sub.Id">@sub.Name</option>
                    }
                </InputSelect>
            }
            else if (!string.IsNullOrEmpty(selectedCategoryName) && selectedCategoryName == "inny")
            {
                <label>Inna subkategoria:</label>
                <InputText @bind-Value="contact.AnotherSubcategory" />
            }

            <button type="submit">Zaktualizuj</button>
        </div>
    </EditForm>

    @* Wyświetlanie błędów o braku tokena. *@
    @if (!string.IsNullOrEmpty(message))
    {
        <p class="text-danger">@message</p>
    }

    @* Wyświetlanie ewentualnych błędów, wcześniej nie wykrytych, jak nieunikalny adres email. Taka forma spowodowana jest problemami przy przesłaniu błędu dla edycji. *@
    @if (validationErrors != null && validationErrors.Any())
    {
        <div class="text-danger">
            @foreach (var error in validationErrors)
            {
                <p>@error.Key: @string.Join(", ", error.Value)</p>
            }
        </div>
    }
}

@code {
    [Parameter]
    public int id { get; set; }

    private ContactUpdateDto contact = new();
    private List<CategoryDto> categories = new();
    private List<SubcategoryDto> subcategories = new();
    private string selectedCategoryName = "";
    private string message = "";
    private int selectedCategoryId;
    private Dictionary<string, List<string>> validationErrors;
    private int _categoryId;
    // Na podstawie tej zmiennej wyświetlane są dane w formularzu dla kategorii.
    private int CategoryId
    {
        get => contact.CategoryId;
        set
        {
            if (contact.CategoryId != value)
            {
                contact.CategoryId = value;
                _ = OnCategoryChanged(value);
            }
        }
    }

    /*
    * <summary>
    * Inicjalizacja kategorii i danych zmienianego kontaktu
    * </summary>
    */
    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();
        // Pobranie danych o kontakcie z bazy
        try
        {
            var oldContact = await ContactService.GetContactByIdAsync(id);

            if (oldContact == null)
            {
                Navigation.NavigateTo("/not-found");
            }
            else
            {
                // Rzutowanie kontaktu z ContactDto na ContactUpdateDto
                contact = new ContactUpdateDto
                    {
                        Id = id,
                        FirstName = oldContact.FirstName,
                        LastName = oldContact.LastName,
                        Email = oldContact.Email,
                        PhoneNumber = oldContact.PhoneNumber,
                        BirthDate = oldContact.BirthDate,
                        CategoryId = oldContact.CategoryId,
                        SubcategoryId = oldContact.SubcategoryId,
                        AnotherSubcategory = oldContact.AnotherSubcategory
                    };
            }
            selectedCategoryId = oldContact.CategoryId;
            var selectedCategory = categories.FirstOrDefault(c => c.Id == contact.CategoryId);
            if (selectedCategory != null)
            {
                selectedCategoryName = selectedCategory.Name;

                // jeśli jest kategoria "służbowy" pobieramy z bazy podkategorie
                if (selectedCategoryName == "służbowy")
                {
                    subcategories = await CategoryService.GetSubcategoriesByCategoryIdAsync(contact.CategoryId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd: {ex.Message}");
        }
    }


    /*
    * <summary>
    * Funkcja wywoływana przy próbie edycji kontaktu.
    * </summary>
    */
    private async Task HandleSubmit()
    {
        try
        {
            // Pobranie tokenu, sprawdzenie czy użytkownik jest zalogowany
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

            if (string.IsNullOrEmpty(token))
            {
                message = "Brak tokenu. Zaloguj się.";
                return;
            }

            var response = await ContactService.UpdateContactAsync(contact, token);

            if (response.IsSuccessStatusCode)
            {
                message = "Zaktualizowano kontakt!";
                Navigation.NavigateTo("/contacts");
            }
            else
            {
                validationErrors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
            }
        }
        catch (Exception ex)
        {
            message = $"Błąd: {ex.Message}";
        }
    }

    /*
        * <summary>
        * Funkcja wywoływana przy zmianie kategorii, pozwala dostosować się polom związanym z podkategorią. 
        * Podobna do funkcji w pliku AddContact.razor, różnicą są dane wejściowe, w jednym jest argument formularz, 
        * a tutaj wartość klasa selectedCategoryId, powodem są problemy przy wyświetlanniu startowej wartości 
        * w formularzu dla kategorii.
        * </summary>
        */
    private async Task OnCategoryChanged(int selectedCategoryId)
    {
        // Zmiana kategorii na wybraną
        var selectedCategory = categories.FirstOrDefault(c => c.Id == selectedCategoryId);

        // Wpisanie nazwy kategorii w formularzu
        if (selectedCategory != null)
        {
            selectedCategoryName = selectedCategory.Name;
        }

        // Zmiana obiektu
        contact.CategoryId = selectedCategoryId;

        // Jeśli kategoria to "służbowy" to ładuje podkategorie dla kategorii "służbowy"
        if (selectedCategoryName == "służbowy")
        {
            subcategories = await CategoryService.GetSubcategoriesByCategoryIdAsync(selectedCategoryId);
            contact.SubcategoryId = null;
            contact.AnotherSubcategory = null;
        }
        else
        {
            contact.SubcategoryId = null;
            contact.AnotherSubcategory = null;
        }

        StateHasChanged();
    }
}
